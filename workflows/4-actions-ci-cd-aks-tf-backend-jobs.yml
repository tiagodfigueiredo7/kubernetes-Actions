name: 4-actions-ci-cd-aks-tf-backend-jobs

on:
  push:
    branches: [ main ]
    paths: .github/workflows/4-actions-ci-cd-aks-tf-backend-jobs.yml
  pull_request:
    branches:  none # [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  LOCATION: westeurope
  INFRA_RESOURCE_GROUP: tfstate-resourcegroup
  TF_STATE_STORAGE_ACCOUNT_NAME: tfstatestorage102
  TF_STATE_CONTAINER_NAME: tfstate
  TF_STATE_FILE_NAME: tfstate
  TF_STATE_ACCESS_KEY: "" # will be set later
    
  DOCKER_REPOSITORY: acrforaks102.azurecr.io
  IMAGE_NAME: webapp
  IMAGE_TAG: ${{ github.run_number }}
  
  ARM_CLIENT_ID: ${{ secrets.AZURE_SP_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_SP_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  AKS_RESOURCE_GROUP: aks-102-rg
  AKS_NAME: aks-102
  ACR_NAME: acrforaks102
  SQL_INSTANCE_NAME: sqlforaks102
  DB_ADMIN_LOGIN: houssem
  DB_ADMIN_PASSWORD: "@Aa123456"
  STORAGE_NAME: storageforaks102
    
jobs:

  create-terraform-backend:
    name: Create Terraform Backend
    runs-on: ubuntu-latest

    steps:

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      
    - name: Create storage for tfstate
      uses: azure/CLI@v1
      with:
        azcliversion: 2.35.0
        inlineScript: |
          # Create the resource group
          az group create -n $INFRA_RESOURCE_GROUP -l $LOCATION          
          # Create the storage account
          az storage account create -g $INFRA_RESOURCE_GROUP -l $LOCATION \
            --name $TF_STATE_STORAGE_ACCOUNT_NAME \
            --sku Standard_LRS \
            --encryption-services blob

  create-terraform-infra:
    name: Create Infra with Terraform
    runs-on: ubuntu-latest
    needs: [create-terraform-backend]

    steps:

    - uses: actions/checkout@v2

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Get TF backend storage account key
      uses: azure/CLI@v1
      with:
        azcliversion: 2.27.2
        inlineScript: |
          # Retrieve the storage account key
          ACCOUNT_KEY=$(az storage account keys list --resource-group $INFRA_RESOURCE_GROUP --account-name $TF_STATE_STORAGE_ACCOUNT_NAME --query [0].value -o tsv)
          # Create a storage container (for the Terraform State)
          az storage container create --name $TF_STATE_CONTAINER_NAME --account-name $TF_STATE_STORAGE_ACCOUNT_NAME --account-key $ACCOUNT_KEY

          echo "TF_STATE_ACCESS_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV
    
    - name: Replace Variables in terraform.tfvars
      uses: datamonsters/replace-action@v2
      with:
        files: infra/terraform.tfvars
        replacements: '__AKS_RESOURCE_GROUP__=${{ env.AKS_RESOURCE_GROUP }},__AKS_NAME__=${{ env.AKS_NAME }},__ACR_NAME__=${{ env.ACR_NAME }},__SQL_INSTANCE_NAME__=${{ env.SQL_INSTANCE_NAME }},__DB_ADMIN_LOGIN__=${{ env.DB_ADMIN_LOGIN }},__DB_ADMIN_PASSWORD__=${{ env.DB_ADMIN_PASSWORD }},__STORAGE_NAME__=${{ env.STORAGE_NAME }}'
 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.6 
    
    - name: Terraform fmt
      id: fmt
      run: terraform fmt
      working-directory: infra
      continue-on-error: true
    
    - name: Terraform Init (Azure Backend)
      run: terraform init
             -backend-config="storage_account_name=$TF_STATE_STORAGE_ACCOUNT_NAME"
             -backend-config="container_name=$TF_STATE_CONTAINER_NAME"
             -backend-config="access_key=$TF_STATE_ACCESS_KEY"
             -backend-config="key=$TF_STATE_FILE_NAME"
      working-directory: infra/
    
    - name: Terraform Validate
      run: terraform validate -no-color
      working-directory: infra
    
    - name: Terraform Plan
      run: terraform plan -out out.plan -var-file="terraform.tfvars"
      working-directory: infra
      continue-on-error: true
      
    - name: Terraform Apply
      # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve out.plan
      working-directory: infra

  build-push-container:
    name: Build & Push Docker container
    runs-on: ubuntu-latest
    needs: [create-terraform-infra]
        
    steps:

    - uses: actions/checkout@v2
 
    - name: Build Docker Image
      run:
        docker build ./MvcApp/ --file ./MvcApp/Dockerfile --tag $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG

    - name: Scan Docker Image using Trivy and Dockle
      uses: Azure/container-scan@v0
      continue-on-error: true
      with:
        image-name: ${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
              
    - name: Scan Docker Image using Trivy
      continue-on-error: true
      run:
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/Library/Caches:/root/.cache/ aquasec/trivy --exit-code 0 --severity MEDIUM,HIGH,CRITICAL --ignore-unfixed $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to ACR
      run: |
        ACR_PASSWORD=$(az acr credential show -n $ACR_NAME -o tsv --query passwords[0].value)
        docker login $DOCKER_REPOSITORY --username $ACR_NAME --password $ACR_PASSWORD
        
    - name: Push Image to ACR
      run: |
        docker push $DOCKER_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG
     
  deploy-app-aks:
    name: Deploy app into Kubernetes
    runs-on: ubuntu-latest
    needs: [build-push-container, create-terraform-infra]

    steps:

    - uses: actions/checkout@v2

    - name: Replace Image Repository, Name and Tag in YAML deployment
      uses: datamonsters/replace-action@v2
      with:
        files: kubernetes/mvc-deployment.azure.yaml
        replacements: 'ACR_NAME=${{ env.DOCKER_REPOSITORY }},DOCKER_IMAGE=${{ env.IMAGE_NAME }},TAG=${{ env.IMAGE_TAG }}'
        
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Connect to AKS
      uses: Azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.AKS_NAME }}
        resource-group: ${{ env.AKS_RESOURCE_GROUP }}

    - name: Deploy YAML manifest into AKS
      uses: Azure/k8s-deploy@v1
      with:
        manifests: |
          kubernetes/mssql-pv.azure.yaml
          kubernetes/mssql-secret.yaml
          kubernetes/mssql-deployment.yaml
          kubernetes/mvc-deployment.azure.yaml
          kubernetes/mssql-configmap.yaml
     
    - name: Run Kube Advisor to check for Resource Limits
      continue-on-error: true
      run:
        kubectl run --rm -i -t kubeadvisor --image=mcr.microsoft.com/aks/kubeadvisor --restart=Never
        
    - name: Deploy Kured into AKS using Helm
      run: |
        helm repo add kured https://weaveworks.github.io/kured
        helm upgrade kured kured/kured --namespace kured --install --create-namespace \
          --set nodeSelector."beta\.kubernetes\.io/os"=linux \
          --set configuration.startTime=9am \
          --set configuration.endTime=5pm \
          --set configuration.timeZone="America/Los_Angeles"
          # --set configuration.rebootDays="[mo,tu,we,th,fr]"
          
    - name: Deploy Prometheus & Grafana into AKS using Helm
      run: |
        helm repo add "stable" https://charts.helm.sh/stable
        helm upgrade --install prometheus stable/prometheus --set server.service.type=LoadBalancer
        helm upgrade --install grafana stable/grafana --set service.type=LoadBalancer
        
    - name: Deploy EFK into AKS using Helm
      run: |
        helm upgrade --install elasticsearch stable/elasticsearch 
        kubectl apply -f logging-efk/fluentd-daemonset-elasticsearch.yaml
        helm upgrade kibana stable/kibana --install -f logging-efk/kibana-values.yaml
